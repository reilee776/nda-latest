#!/bin/bash

set -e  # Exit on error

# Load configuration
CONFIG_FILE="./buildinfo.conf"
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "❌ Error: Configuration file $CONFIG_FILE not found!"
    exit 1
fi

source "$CONFIG_FILE"  # Load environment variables

# Use argument if provided, otherwise use the value from buildinfo.conf
LIBZ_VERSION="${1:-$LIBZ_VERSION}"

# Define paths using sourced variables
SRC_DIR="$PKG_SRC_DIR"
INSTALL_PREFIX="$LIBS_LIB_ZLIB_DIR"
TARBALL="zlib-${LIBZ_VERSION}.tar.gz"
TARBALL_URL="https://zlib.net/fossils/zlib-${LIBZ_VERSION}.tar.gz"
EXTRACTED_DIR="zlib-${LIBZ_VERSION}"

echo "🚀 Building Zlib (libz) version: ${LIBZ_VERSION}"
echo "📌 Source Directory: $SRC_DIR"
echo "📌 Install Prefix: $INSTALL_PREFIX"
echo "📥 Download URL: $TARBALL_URL"

# Ensure required directories exist
mkdir -p "$SRC_DIR"
mkdir -p "$INSTALL_PREFIX"

# Navigate to source directory
cd "$SRC_DIR"

# Download source code if not already present
if [[ ! -f "$TARBALL" ]]; then
    echo "📥 Downloading $TARBALL..."
    if wget --spider "$TARBALL_URL" 2>/dev/null; then
        wget -O "$TARBALL" "$TARBALL_URL"
    else
        echo "❌ Error: Zlib version ${LIBZ_VERSION} not found at $TARBALL_URL"
        exit 1
    fi
else
    echo "✅ Source tarball already exists: $TARBALL"
fi

# Extract the source code
echo "📦 Extracting $TARBALL..."
tar -xvzf "$TARBALL"

# Change to extracted directory
cd "$EXTRACTED_DIR"

# Configure the build
echo "⚙️ Configuring build for Zlib..."
./configure --prefix="$INSTALL_PREFIX" --static

# Clean, compile, and install
echo "🛠️  Cleaning previous builds..."
make clean

echo "🚀 Building Zlib..."
CFLAGS="-fPIC" make -j"$(nproc)"

echo "🚀 Installing Zlib..."
make install

echo "✅ Zlib version ${LIBZ_VERSION} built and installed successfully in ${INSTALL_PREFIX}"

