CC = gcc

# Library and include paths
OPENSSL_DIR = /src/libs/1.0.2k/openssl-static-1.0.2k
#CUSTOM_LIB_PATH = /hiagt/lib/nda-pam
LIB_DIR = ./lib2
#LIB_DIR = /hiagt/lib/nda-pam
CFLAGS = -g -fPIC -I$(OPENSSL_DIR)/include -Wall -Wextra -std=c99
#LDFLAGS = -shared -fPIC -L$(LIB_DIR) -Wl,-rpath,'$$ORIGIN/../lib'
#LDFLAGS = -shared -fPIC -L$(LIB_DIR) -Wl,-rpath,$(LIB_DIR)

# Libraries to link against
#LIBS = -lcurl -lcrypto -lssl -ljson-c -lpam -lcrypt -luuid
LIBS = -lcurl -lcrypto -ljson-c -lpam -lcrypt -luuid

SSL_LIBS = $(OPENSSL_DIR)/lib/libssl.a $(OPENSSL_DIR)/lib/libcrypto.a

# Target output
TARGET = nda-pam.so

#LDFLAGS = -g -shared -fPIC -L$(OPENSSL_DIR)/lib -Wl,-rpath,$(LIB_DIR)
LDFLAGS = -shared -L$(OPENSSL_DIR)/lib

# Source and object files
PAM_MODULE_SRC = nd_nix_pam.c
ND_UTILS_C = ./libsrc/nd_utils.c
ND_UTILS_H = ./libsrc/nd_utils.h
ND_LOGS_C = ./libsrc/nd_nix_logs.c
ND_LOGS_H = ./libsrc/nd_nix_logs.h
ND_RESTAPI_C = ./libsrc/nd_restapi_func.c
ND_RESTAPI_H = ./libsrc/nd_restapi_func.h

SRCS = $(PAM_MODULE_SRC) $(ND_UTILS_C) $(ND_LOGS_C) $(ND_RESTAPI_C)
HEADERS = $(ND_UTILS_H) $(ND_LOGS_H) $(ND_RESTAPI_H)
OBJS = $(SRCS:.c=.o)

# Default target
all: $(TARGET)

# Build shared object
$(TARGET): $(OBJS)
	$(CC) $(LDFLAGS) $(OBJS) -o$@ $(SSL_LIBS) $(LIBS)

# Compile source files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean up generated files
clean:
	rm -f $(OBJS) $(TARGET)

.PHONY: all clean
