CC = gcc

# Library and include paths
LIB_DIR = ./lib2
CFLAGS = -g -fPIC -I$(LIB_DIR)/include \
         -I/src/libs/uuid/util-linux-2.39-static/include \
         -I/src/libs/json-c/json-c-0.16-static/include \
         -I/src/libs/openssl/openssl-1.0.2k-static/include \
         -I/src/libs/curl/7.61.1/curl-7.61.1-static/include \
         -I/src/libs/libz/zlib-1.2.11-static/include \
         -Wall -Wextra -g -std=c99

# Target output
TARGET = nda-pam.so

# Custom library path
CUSTOM_LIB_PATH = /hiagt/lib/nda-pam

# Linker flags
LDFLAGS = -g -shared -fPIC -Wl,-rpath,$(CUSTOM_LIB_PATH) \
          /src/libs/uuid/util-linux-2.39-static/lib/libuuid.a \
          -Wl,--whole-archive /src/libs/json-c/json-c-0.16-static/lib64/libjson-c.a -Wl,--no-whole-archive \
          -Wl,--whole-archive /src/libs/curl/7.61.1/curl-7.61.1-static/lib/libcurl.a  -Wl,--no-whole-archive \
	  -Wl,--whole-archive /src/libs/openssl/openssl-1.0.2k-static/lib/libcrypto.a -Wl,--whole-archive /src/libs/openssl/openssl-1.0.2k-static/lib/libssl.a -Wl,--no-whole-archive \
          /src/libs/libz/zlib-1.2.11-static/lib/libz.a 

# Libraries to link against (removing -lcurl, -lssl, -lcrypto, -lz since we use static)
LIBS = -lpam -lcrypt

# Source and object files
PAM_MODULE_SRC = nd_nix_pam.c
ND_UTILS_C = ./libsrc/nd_utils.c
ND_UTILS_H = ./libsrc/nd_utils.h
ND_LOGS_C = ./libsrc/nd_nix_logs.c
ND_LOGS_H = ./libsrc/nd_nix_logs.h
ND_RESTAPI_C = ./libsrc/nd_restapi_func.c
ND_RESTAPI_H = ./libsrc/nd_restapi_func.h

SRCS = $(PAM_MODULE_SRC) $(ND_UTILS_C) $(ND_LOGS_C) $(ND_RESTAPI_C)
HEADERS = $(ND_UTILS_H) $(ND_LOGS_H) $(ND_RESTAPI_H)
OBJS = $(SRCS:.c=.o)

# Default target
all: $(TARGET)

# Build shared object
$(TARGET): $(OBJS)
	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $@

# Compile source files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean up generated files
clean:
	rm -f $(OBJS) $(TARGET)

.PHONY: all clean

